{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\react-app\\\\src\\\\components\\\\Opdracht5.js\";\nimport React from \"react\";\n\nclass Opdracht3 extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getWeather = async city => {\n      const url = `'https://jsonplaceholder.typicode.com/users`;\n      const response = await fetch(url).then(response => response.json()).then(data => {\n        console.log(response);\n        this.setState({});\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.state = {};\n  }\n\n  handleChange(event) {\n    // hiermee zorg je er voor dat this.state.value actueel blijft en die zie je in de input\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.value,\n      onChange: e => this.handleChange(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"select\", {\n      value: this.state.value,\n      onChange: e => this.handleChange(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }\n    }, this.state.fruits.map((x, y) => /*#__PURE__*/React.createElement(\"option\", {\n      key: y,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 121\n      }\n    }, x)))), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }\n    }, this.state.value));\n  }\n\n}\n\nexport default Opdracht3;","map":{"version":3,"sources":["C:/xampp/htdocs/react-app/src/components/Opdracht5.js"],"names":["React","Opdracht3","Component","constructor","props","getWeather","city","url","response","fetch","then","json","data","console","log","setState","catch","error","state","handleChange","event","value","target","render","e","fruits","map","x","y"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,SAAN,SAAwBD,KAAK,CAACE,SAA9B,CAAwC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAYnBC,UAZmB,GAYN,MAAOC,IAAP,IAAgB;AACzB,YAAMC,GAAG,GAAI,6CAAb;AACA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAL,CAAWG,IAAX,CAAgBF,QAAQ,IAAIA,QAAQ,CAACG,IAAT,EAA5B,EAA6CD,IAA7C,CAAkDE,IAAI,IAAI;AACjFC,QAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AACE,aAAKO,QAAL,CAAc,EAAd;AAGD,OALsB,EAMtBC,KANsB,CAMfC,KAAD,IAAW;AAChBJ,QAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACD,OARsB,CAAvB;AASD,KAvBgB;;AAEf,SAAKC,KAAL,GAAa,EAAb;AAGH;;AAEDC,EAAAA,YAAY,CAACC,KAAD,EAAQ;AAChB;AACA,SAAKL,QAAL,CAAc;AAACM,MAAAA,KAAK,EAAED,KAAK,CAACE,MAAN,CAAaD;AAArB,KAAd;AACH;;AAeDE,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,KAAK,EAAE,KAAKL,KAAL,CAAWG,KAArC;AAA4C,MAAA,QAAQ,EAAGG,CAAD,IAAO,KAAKL,YAAL,CAAkBK,CAAlB,CAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,eAEA;AAAQ,MAAA,KAAK,EAAE,KAAKN,KAAL,CAAWG,KAA1B;AAAiC,MAAA,QAAQ,EAAGG,CAAD,IAAO,KAAKL,YAAL,CAAkBK,CAAlB,CAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyE,KAAKN,KAAL,CAAWO,MAAX,CAAkBC,GAAlB,CAAsB,CAACC,CAAD,EAAGC,CAAH,kBAAS;AAAQ,MAAA,GAAG,EAAEA,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiBD,CAAjB,CAA/B,CAAzE,CAFA,CADJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKT,KAAL,CAAWG,KAAf,CALJ,CADJ;AASD;;AApCiC;;AAuCxC,eAAepB,SAAf","sourcesContent":["import React from \"react\";\r\n\r\nclass Opdracht3 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n        }\r\n    }\r\n\r\n    handleChange(event) {\r\n        // hiermee zorg je er voor dat this.state.value actueel blijft en die zie je in de input\r\n        this.setState({value: event.target.value});\r\n    }\r\n\r\n    getWeather = async (city) => {\r\n        const url = `'https://jsonplaceholder.typicode.com/users`;\r\n        const response = await fetch(url).then(response => response.json()).then(data => {\r\n        console.log(response)\r\n          this.setState({\r\n\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        })\r\n      };\r\n        \r\n    render() {\r\n        return (\r\n            <div>\r\n                <form>\r\n                <input type=\"text\" value={this.state.value} onChange={(e) => this.handleChange(e)} />\r\n                <select value={this.state.value} onChange={(e) => this.handleChange(e)}>{this.state.fruits.map((x,y) => <option key={y}>{x}</option>)}</select>\r\n                </form>\r\n                <p>{this.state.value}</p>\r\n            </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default Opdracht3;"]},"metadata":{},"sourceType":"module"}